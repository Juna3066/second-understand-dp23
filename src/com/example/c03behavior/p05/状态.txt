状态模式 state

架构了一套 完备的事物内部的状态转化机制。
并且状态对外不可见
化简了 事物状态变化逻辑。
使得行为 随状态改变而改变。

封装是对现实世界中 事物的模拟。
类封装了属性、方法。
实例化后的对象属性 反应了某种状态，调用方法，展现相应的行为。


状态模式的应用 将状态变化逻辑 从系统环境 中 分离出来，
状态接口 规定了 状态转化相关规范,
使得状态相应机制 分立、自治、以一种松耦合的方式    实现了系统状态 和 行为 的联动。

系统只要持有 状态类的引用，并把this 传递给状态，调用状态的切换接口，状态的变化就无需关系，交由状态类 去处理。

组成：
State: 通用状态标准规范。handle(context)  处理请求 传入 系统环境
ConcreteState:

Context: 系统环境，持有状态的引用，和更新状态的方法setState(state)
对外暴漏请求发起方法request()

状态模式 和 策略模式 类似

策略模式是：策略抽离出来，并有外部注入，从而引发不同的行为，可扩展性好。
状态模式是：状态转化等逻辑抽离出来，使系统的状态和行为相应 有更好的逻辑控制。
同时实现系统状态主动自我转化。
侧重点略有不同。

如果系统有大量的if else代码,可以考虑状态模式。
状态的解耦和分立，大大增加了代码可读性。系统运行效率、健壮性、也大大提升。

